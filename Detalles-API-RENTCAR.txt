	******************* API DE RESERVAS ********************


1 - Creacion de PROYECTO

	composer create-project laravel/laravel api-reservas-rentcar "10.*"


2 - Crear y Configurar BD

	BD: api-reservas-rentcar


******* TENDREMOS 2 TABLAS (PARA ESTE PROYECTO, CREAREMOS UNA SOLA TABLA CON ESTAS TABLAS UNIDAS, YA DESPUES HACEMOS OTRO RELACIONANDO AMBAS TABLAS) SOLO CREAREMOS LA TABLA 'RESERVATIONS'

	1- TABLA: CLIENTS_INFO
	2- TABLA: CARS
	3- TABLA: RESERVATIONS

--------------------------------------------------------------------------------------------

Eliminar todas las Migraciones:

	php artisan migrate:rollback
	php artisan migrate:rollback --step=1
	php artisan migrate:rollback --step=2


--------------------------------------------------------------------------------------------

3- Crear y Generar las Migraciones para la tabla 'reservations' y para 'cars'
	
	php artisan make:migration create_cars_table
	php artisan make:migration create_reservations_table

	
4- Crear Modelo:

	php artisan make:model Car
	php artisan make:model Reservation



5- Controlador: dentro de Carpeta API y el controlador debe tener una estructura de API. se coloca --api para crear un controlador de tipo resource. (-r == --api)

	php artisan make:controller API/ReservationsController --api
	php artisan make:controller API/CarsController --api


---- PARA ESTE PUNTO SOLO HEMOS CREADO LOS MODELOS, MIGRACIONES, CONTROLADORES DE LA TABLA 'RESERVATIONS' ESTO PARA PROBAR CON UNA SOLA TABLA, YA DESPUES CREAREMOS LA TABLA 'CARS' Y RELACIONAREMOS CON LA TABLA 'RESERVATIONS'.


6- luego de colocar todos los campos, ahora migraremos.

	php artisan migrate

7- introduciendo registros manualmente directo en la tabla a traves de sql
('Alice Smith', '987654321', '987-654-3210', 'alice@example.com', 'Honda', 'Accord', '2023', '7 people', '$55/day', '2024-05-10', '2024-05-15', 'City Center', 'Airport', 'pending', NOW(), NOW());


8- generado la rutas y configurando los metodos en el controlador

- Creando el metodo index
- Creando el metodo store, para almacenar el nuevo registro. Dbemos modificar el Modelo e insetar los campos a almacenar.

** Creando nueva reserva: para crear una reserva no se necesita colocar el id, PERO cuando necesitemos actualizar un registro, sii necesitamos colocar el id a actualizar.

{       
        "client_name": "John Doe",
        "dni": "1234567889",
        "phone": "123-456-7890",
        "email": "john@examplfe.com",
        "brand": "Toyota",
        "model": "Corolla",
        "year": "2024",
        "capacity": "5 people",
        "price": "$35/day",
        "pickup_date": "2024-04-30",
        "return_date": "2024-05-05",
        "pickup_location": "Airport",
        "return_location": "City Center",
        "status": "confirm",
        "created_at": "2024-04-27T14:54:43.000000Z",
        "updated_at": "2024-04-27T14:54:43.000000Z"
    }


AHORA MISMO TENEMOS LAS VALIDACIONES EN EL MISMO CONTROLADOR, PERO CREAREMOS UN POSTREQUEST PARA SEPARAR LAS VALIDACIONES Y AGREGAR VALIDACIONES PERSONALIZADAS.

	php artisan make:request CreateReservation

instanciar Request en el Metodo Store.

	php artisan make:request UpdateReservation
instanciar Request en el Metodo Update.


************** PARA VER LOS ERRORES DE LOS DATOS INTRODUCIDOS EN POSTMAN DE LAS VALIDACIONES 
DEBEMOS IR A HEADER EN POSTMAN Y COLOCAR :

Key           Value
Accept	      application/json



--------------------------------------------------------------------------------------------

***** PARA ESTE PUNTO DECIDI CREAR UN SEEDER PARA LLENAR DATOS FICTICIOS, YA QUE EN EL PROCESO DEBERE VACIAR Y MIGRAR LA BD VARIAS VECES.

*************************************** API REST - SEEDER (Registros de Prueba)

1-	php artisan make:seeder ReservasSeeder


2- importar esta linea en ReservasSeeder 
	
	use Illuminate\Support\Facades\DB; 


3- Agregar esta linea en el DatabaseSeeder.php
	
	$this->call(PacienteSeeder::class);


al terminar de crear los registros falsos, ejecutamos 
*** RECORDAR QUE 'php artisan migrate:fresh' XXXX NO LO PODEMOS USAR EN PRODUCCION

	php artisan migrate --seed
	
			ó

	php artisan migrate:fresh --seed

--------------------------------------------------------------------------------------------


	  ------------------------------------------------------------------
*** HASTA ESTE MOMENTO, TENEMOS TODO EL CRUD FUNCIONANDO, AHORA INSTALAREMOS EL PAQUETE DE LARAVEL SANCTUM, CREAREMOS EL REGISTRO Y EL LOGIN PARA LOS USUARIOS Y ADEMAS INTEGRAREMOS LOS TOKENS PARA LA VALIDACION EN EL LOGIN.


***************************************** Laravel Sanctum - API-TOKENS
https://laravel.com/docs/10.x/sanctum#main-content
#Issuing API Tokens

Documentacion relacionada a la creacion de api tokens -> Issuing API Tokens
https://laravel.com/docs/11.x/sanctum#main-content

1- Instalacion:

	composer require laravel/sanctum


2- Publicar y Migrar

	php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"


2.1 -- REVISAR SI EL MODELO TIENE ESTAS LINEAS, DE LO CONTRARIO SE DEBEN AÑADIR

	
	use Laravel\Sanctum\HasApiTokens;
 
	class User extends Authenticatable
	{
    	   use HasApiTokens, HasFactory, Notifiable;
	}

--------------------------------------------------------------------------------------------
FORMAS DE ELIMINAR UN TOKEN 

// Revoke all tokens...
$user->tokens()->delete();
 
// Revoke the token that was used to authenticate the current request...
$request->user()->currentAccessToken()->delete();
 
// Revoke a specific token...
$user->tokens()->where('id', $tokenId)->delete();
--------------------------------------------------------------------------------------------


3- 	php artisan migrate:reset


4- Finally, you should run your database migrations.

	php artisan migrate --seed


5- Ir a app/Http/Kernel.php

pegar esta linea en 'api'

\Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,

********************** HASTA ESTE MOMENTO YA TENEMOS INSTALADO LARAVEL SANCTUM PARA LA GENERACION DE LOS TOKENS.

		

         ****** AHORA CREAREMOS EL REGISTER Y EL LOGIN DE LA APLICACION ******

***** Crear Controlador AutenticarController (Este controlador manejara las rutas register, login y logout)

	php artisan make:controller API\AutenticarController

1- Crearemos 3 metodos en el controlador:

	- Registrar usuario (register) 
	- Login de usuario (log in) -→ crea el token
	- Cerrar sesion (log out) -→ se le debe pasar el token para cerrar sesion


2- crear las rutas register, login, logout en api.php


3 -  Crearemos el metodo register, login, logout en AutenticarController

POR AHORA TODO BIEN, nos permitio crear un nuevo usuario.


4- ******* INICIO DE SESION Y GENERACION DE TOKEN

cuando hagamos login, se nos creara un token, este token nos dara acceso a las otras rutas que se encuentran protegidas en el middleware, debemos colocarlo para cada ruta que queramos acceder, podemos enviar el token a traves del --- Authorization o en el body.

PARA PROBARLO NOS DIRIGIMOS A LA RUTA DE VER TODAS LAS RESERVAS Y HACEMOS LO SIGUIENTE:

- Configurar Header
Accept - application/json

Colocar token en el Authorization, Elegir Bearer Token:
 
	1|Fi89Q3vIJiXqSyz8i3oHhWTDghzCl9wGqsruEkR5174f7c50


PROBAR CON LAS DEMAS RUTAS.

- POST
- PUT
- SHOW
- DELETE
- Logout

HASTA EL MOMENTO FUNCIONA TODO EXCELENTE!!!



----------------------------------- METODO RegistrO

6.2 - Crear un Request de validacion para el metodo registro

	php artisan make:request RegistroRequest

6.3 Importar Request en metodo registro()

6.4 - Creando Usuario con Postman - Metodo Post

- http://localhost:8000/api/registro

- Configurar Header
Accept - application/json

-Body + Send
{
    "name" : "Juan",
    "email": "juan2021@gmail.com",
    "password": "1234"
}

"Usuario registrado correctamente"

7 ----------------------------------- METODO LOGIN

7.2 - Crear un Request de validacion para el metodo login

	php artisan make:request AccesoRequest


7.3 Importar Request en metodo login()
& Importar: 
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;

7.4- Crear la logica para crear el token

7.5- Crear la ruta en api.php


7.6 - Logeando Usuario con Postman - Metodo POST

- http://localhost:8000/api/login

- Configurar Header
Accept - application/json
Accept-Encoding - Accept-Encoding


-Body + Send
{
    "email": "juan2021@gmail.com",
    "password": "1234"
}

Respuesta: 
{
    "res ": true,
    "token": "1|oiqyUDgmTFh1aK8APTJe6MD7vvtdhGhEJxjITPYP95735dd4",
    "msg": "Autenticación exitosa"
}


8 ----------------------------------- METODO LOGOUT

1- http://localhost:8000/api/logout

2- envolvemos la ruta logout en un middleware

3- Pasamos el token que se genero al iniciar sesion en el Authorization, seleccionamos Bearer Token y en el campo del lado, pegamos el token.


***** AHORA PARA VER TODOS LOS PACIENTES O PARA ACCEDER A LA RUTAS DE PACIENTES DEBEMOS PASAR EL TOKEN GENERADO AL INICIAR SESION DEBEMOS PASARLO EN POSTMAN EN Authorization - Bearer TOken y pegamos el Token generado y ya podemos hacer SEND y nos mostrara los pacientes o podemos acceder a todas las rutas de pacientes.

EN TODOS LOS METODOS DEBEMOS AGREGAR EL TOKEN
- Crear paciente
- Ver pacientes
- Ver 1 paciente
- Actualizar Paciente
- Eliminar Paciente




-------------------------------------------------------------------------------------------

*********** ASIGNACION DE ROLES

https://medium.com/@miladev95/step-by-step-guide-to-user-role-and-permission-tutorial-in-laravel-10-1fecdabfdea0

https://www.allphptricks.com/simple-laravel-10-user-roles-and-permissions/



*************************************  Tablas Relacionadas

Crearemos una relacion de muchos a muchos, entre Usuarios y Roles. 
Para esto crearemos una tabla intermedio (pivot) role_user

Users            Roles
  |                |
  |                |                   		
  |   role_user    |
  |                |
  |                |
    roles_asignados


--Relacion Muchos a Muchos:
https://laravel.com/docs/8.x/eloquent-relationships#updating-many-to-many-relationships


-- MIgraciones 
https://laravel.com/docs/4.2/migrations


1- Crear Tabla Roles con su migracion

php artisan make:model Role -m

    //relacion muchos a muchos inversa entre roles y usuarios
    public function users()
    {
        return $this->belongsToMany(User::class, 'roles_asignados');
    }


2- Crear tabla pivot intermedia 

	php artisan make:migration create_roles_asignados_table --create=roles_asignados

el comando create sirve para especificar el nombre como queremos que se cree la tabla.

	--create=nombre-deseado-que-tenga-la-tabla


3- Crear campos en ambas tablas.

	
4- Migrar CAMBIOS

	php artisan migrate:refresh --seed


5- REGISTRAR MANUALMENTE DIRECTO EN LA BD, LOS ROLES Y SUS DESCRIPCIONES.

-------------------------------------------------------------------------------------------
id		descripcion
1  admin   administrador del sitio web

2  mod     moderador del sitio web
-------------------------------------------------------------------------------------------


6- Many to Many Relationships
   Attaching / Detaching

https://laravel.com/docs/10.x/eloquent-relationships#many-to-many


*** TOMAR EN CUENTA: LA MEJOR MANERA PARA ASIGNAR ROLES ES USAR 'sync' YA QUE CUANDO EDITAMOS O ACTUALIZAMOS UN USUARIO 'sync' EVITARA QUE SE REPITA EL REGISTRO DEL ROL CADA VEZ QUE SE EDITE UN USUARIO.


6.1 - debemos colocar esto en el metodo register() para cuando registremos un usuario le asignemos un rol.

        //asignando rol
        $user->roles()->attach($request->roles);

6.2 - 

Insertando Usuario nuevo con rol EN POSTMAN - CREANDO NUEVO REGISTRO USUARIO

//usuario con ambos roles
{
    "name" : "Maicol",
    "email": "maicol05@gmail.com",
    "password": "1234",
    "roles": [
        "1",
        "2"
    ]
}

//usuario con rol admin
{
    "name" : "Maicol",
    "email": "maicol05@gmail.com",
    "password": "1234",
    "roles": [
        "1"
    ]
}


//usuario con rol user
{
    "name" : "Maicol",
    "email": "maicol05@gmail.com",
    "password": "1234",
    "roles": [
        "2"
    ]
}



******************************** RETORNAR DATA RELACIONADA

en el metodo login, usamos el parametro with('roles') para mostrar los roles que tiene este usuario, desde postman, debemos logearnos.

$user = User::with('roles')->where('email', $request->email)->first();